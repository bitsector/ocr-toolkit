name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: src/backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/backend
        poetry install --with dev

    - name: Code formatting check with Black
      run: |
        cd src/backend
        poetry run black --check --diff .

    - name: Import sorting check with isort
      run: |
        cd src/backend
        poetry run isort --check-only --diff . --profile black

    - name: Static type checking with mypy
      run: |
        cd src/backend
        poetry run mypy . --config-file mypy.ini

    - name: Security check with Bandit
      run: |
        cd src/backend
        poetry run bandit -r . -c .bandit -f json -o bandit-report.json || true
        poetry run bandit -r . -c .bandit -ll

    - name: Upload Bandit results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: bandit-results-${{ matrix.python-version }}
        path: src/backend/bandit-report.json

  test-and-build:
    runs-on: ubuntu-latest
    needs: lint-and-security
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: src/backend/.venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/backend
        poetry install --with dev

    - name: Run tests
      run: |
        cd src/backend
        poetry run pytest -v

    - name: Test server startup
      run: |
        cd src/backend
        # Start the server in the background
        poetry run uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test if server is responding
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        
        # Stop the server
        kill $SERVER_PID

    - name: Test OpenAPI generation
      run: |
        cd src/backend
        poetry run python generate_openapi.py
        
        # Check if OpenAPI files were generated
        if [ ! -f "../../openapi/openapi.json" ]; then
          echo "OpenAPI JSON file was not generated"
          exit 1
        fi
        
        if [ ! -f "../../openapi/openapi.yaml" ]; then
          echo "OpenAPI YAML file was not generated"
          exit 1
        fi
        
        # Validate JSON syntax
        python -c "import json; json.load(open('../../openapi/openapi.json'))"
        
        # Check if JSON contains expected fields
        python -c "import json; data = json.load(open('../../openapi/openapi.json')); assert 'openapi' in data and 'info' in data and 'paths' in data and '/extract-text' in data['paths'] and '/detect-language' in data['paths'] and '/health' in data['paths']; print('OpenAPI validation passed')"

    - name: Upload OpenAPI artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: openapi-docs-${{ matrix.python-version }}
        path: |
          openapi/openapi.json
          openapi/openapi.yaml

  integration-test:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        cd src/backend
        poetry install

    - name: Run integration tests with sample files
      run: |
        cd src/backend
        # Start the server in the background
        poetry run uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test with sample image files
        for file in ../../sample_files/*.{jpg,jpeg,webp}; do
          if [ -f "$file" ]; then
            echo "Testing OCR with file: $file"
            response=$(curl -s -X POST \
              -F "file=@$file" \
              http://localhost:8000/extract-text)
            
            # Check if response contains expected fields
            echo "$response" | python -c "import sys, json; data = json.load(sys.stdin); assert 'success' in data and 'extracted_text' in data and 'confidence_score' in data; print('✓ OCR test passed for $file')" || (echo "✗ OCR test failed for $file" && exit 1)
          fi
        done
        
        # Stop the server
        kill $SERVER_PID

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
