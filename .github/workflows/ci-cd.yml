name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: src/ocr-engine/.venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/ocr-engine
        poetry install --with dev

    - name: Code formatting check with Black
      run: |
        cd src/ocr-engine
        poetry run black --check --diff .

    - name: Import sorting check with isort
      run: |
        cd src/ocr-engine
        poetry run isort --check-only --diff . --profile black

    - name: Check for unused and non-top-level imports
      run: |
        cd src/ocr-engine
        poetry run flake8 --select=F401,E402 --statistics .

  static-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: src/ocr-engine/.venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/ocr-engine
        poetry install --with dev

    - name: Create mypy configuration
      run: |
        cd src/ocr-engine
        cat > mypy.ini << 'EOF'
        [mypy]
        python_version = 3.13
        ignore_missing_imports = true
        no_strict_optional = true
        disallow_untyped_defs = false
        disallow_incomplete_defs = false
        check_untyped_defs = false
        disallow_untyped_decorators = false
        warn_redundant_casts = true
        warn_unused_ignores = true

        [mypy-yaml.*]
        ignore_missing_imports = true

        [mypy-pytesseract.*]
        ignore_missing_imports = true

        [mypy-langdetect.*]
        ignore_missing_imports = true

        [mypy-fitz.*]
        ignore_missing_imports = true
        EOF

    - name: Static type checking with mypy
      run: |
        cd src/ocr-engine
        poetry run mypy . --config-file mypy.ini

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: src/ocr-engine/.venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/ocr-engine
        poetry install --with dev

    - name: Create bandit configuration
      run: |
        cd src/ocr-engine
        echo "Scanning only application code, excluding dependencies"

    - name: Security check with Bandit
      run: |
        cd src/ocr-engine
        # Scan only our application code, excluding virtual environments and dependencies
        # Skip B104 (bind all interfaces - expected for dev server), B603 (subprocess - needed for OpenAPI generation), B404 (subprocess import)
        poetry run bandit -r api models services db cache *.py --skip B101,B104,B603,B404 --exclude .venv,venv,.env,env,site-packages,__pycache__,.pytest_cache,node_modules -f json -o bandit-report.json || true
        poetry run bandit -r api models services db cache *.py --skip B101,B104,B603,B404 --exclude .venv,venv,.env,env,site-packages,__pycache__,.pytest_cache,node_modules -ll

    - name: Upload Bandit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results
        path: src/ocr-engine/bandit-report.json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Check if SARIF file exists
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "sarif_exists=true" >> $GITHUB_OUTPUT
          echo "SARIF file found"
        else
          echo "sarif_exists=false" >> $GITHUB_OUTPUT
          echo "SARIF file not found"
        fi

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.sarif_exists == 'true'
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy results as artifact
      if: steps.check-sarif.outputs.sarif_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif

  build:
    runs-on: ubuntu-latest
    needs: [lint, static-check, security-check]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: src/ocr-engine/.venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd src/ocr-engine
        poetry install --with dev

    - name: Test server startup
      run: |
        cd src/ocr-engine
        # Start the server in the background
        poetry run uvicorn fast_api_server:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test if server is responding
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        
        # Stop the server
        kill $SERVER_PID

    - name: Test OpenAPI generation
      run: |
        cd src/ocr-engine
        poetry run python generate_openapi.py --no-server
        
        # Check if OpenAPI files were generated
        if [ ! -f "../../openapi/openapi.json" ]; then
          echo "OpenAPI JSON file was not generated"
          exit 1
        fi
        
        if [ ! -f "../../openapi/openapi.yaml" ]; then
          echo "OpenAPI YAML file was not generated"
          exit 1
        fi
        
        # Validate JSON syntax
        python -c "import json; json.load(open('../../openapi/openapi.json'))"
        
        # Check if JSON contains expected fields
        python -c "import json; data = json.load(open('../../openapi/openapi.json')); assert 'openapi' in data and 'info' in data and 'paths' in data and '/extract-text' in data['paths'] and '/detect-language' in data['paths'] and '/health' in data['paths']; print('OpenAPI validation passed')"

    - name: Upload OpenAPI artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: openapi-docs
        path: |
          openapi/openapi.json
          openapi/openapi.yaml

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [lint, static-check, security-check]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: src/ocr-engine/.venv
        key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        cd src/ocr-engine
        poetry install --with dev

    - name: Start OCR API server for E2E tests
      run: |
        cd src/ocr-engine
        # Start the server in the background
        poetry run uvicorn fast_api_server:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        
        # Wait for server to start and verify it's healthy
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl --fail --silent http://localhost:8000/health > /dev/null 2>&1; then
            echo "Server is healthy and ready!"
            break
          fi
          echo "Waiting for server... attempt $i/30"
          sleep 1
        done
        
        # Final verification
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        
        echo "Server started successfully with PID $SERVER_PID"

    - name: Run End-to-End OCR Tests
      run: |
        cd src/ocr-engine
        # Run E2E tests that validate the full OCR pipeline with real sample files
        poetry run pytest tests/test_e2e_ocr.py -v

    - name: Stop OCR API server
      if: always()
      run: |
        cd src/ocr-engine
        if [ -f server.pid ]; then
          SERVER_PID=$(cat server.pid)
          kill $SERVER_PID || true
          rm server.pid
          echo "Server stopped"
        fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        cd src/ocr-engine
        poetry install

    - name: Run integration tests with sample files
      run: |
        cd src/ocr-engine
        # Start the server in the background
        poetry run uvicorn fast_api_server:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test with sample image files
        for file in ../../sample_files/*.{jpg,jpeg,webp}; do
          if [ -f "$file" ]; then
            echo "Testing OCR with file: $file"
            response=$(curl -s -X POST \
              -F "file=@$file" \
              http://localhost:8000/extract-text)
            
            # Check if response contains expected fields
            echo "$response" | python -c "import sys, json; data = json.load(sys.stdin); assert 'success' in data and 'extracted_text' in data and 'confidence_score' in data; print('✓ OCR test passed for $file')" || (echo "✗ OCR test failed for $file" && exit 1)
          fi
        done
        
        # Stop the server
        kill $SERVER_PID
